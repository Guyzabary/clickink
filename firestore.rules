rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isArtist() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'artist';
    }

    function isClient() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client';
    }

    function isFollowingArtist(artistId) {
      return isAuthenticated() && 
        artistId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.followedArtists;
    }

    function canInteractWithPost(artistId) {
      return isAuthenticated() && (
        request.auth.uid == artistId || // Artist can interact with their own posts
        isFollowingArtist(artistId)     // Followers can interact with posts
      );
    }

    function canMessageArtist(artistId) {
      return isAuthenticated() && (
        request.auth.uid == artistId || // Artist can message themselves
        isFollowingArtist(artistId)     // Followers can message artist
      );
    }

    function isAppointmentParticipant(appointmentData) {
      return isAuthenticated() && (
        request.auth.uid == appointmentData.clientId ||
        request.auth.uid == appointmentData.artistId
      );
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) && 
        !request.resource.data.keys().hasAny(['averageRating', 'ratingCount']);
      allow delete: if false;
    }

    // Artist Reviews collection
    match /artistReviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null
                    && request.auth.uid == request.resource.data.clientId
                    && request.resource.data.keys().hasAll(['artistId','clientId','rating','createdAt'])
                    && request.resource.data.rating is int
                    && request.resource.data.rating >= 1
                    && request.resource.data.rating <= 5;
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.clientId
                    && request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['rating', 'comment', 'updatedAt'])
                    && request.resource.data.rating is int
                    && request.resource.data.rating >= 1
                    && request.resource.data.rating <= 5;
      allow delete: if false;
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if isArtist();
      allow update: if isArtist() && resource.data.artistId == request.auth.uid || 
        (
          canInteractWithPost(resource.data.artistId) &&
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likes', 'comments'])
        );
      allow delete: if isArtist() && resource.data.artistId == request.auth.uid;
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (
        resource == null || // Allow reading non-existent documents for queries
        request.auth.uid == resource.data.clientId ||
        request.auth.uid == resource.data.artistId ||
        // Allow reading appointments to check artist availability
        (request.query.limit <= 50 && 
         request.query.filters.size() <= 3 && 
         'artistId' in request.query.filters)
      );

      allow create: if isAuthenticated() && 
        isClient() && 
        request.resource.data.clientId == request.auth.uid;

      allow update: if isAuthenticated() && (
        // Artist updates (price proposal, rejection)
        (isArtist() && 
         resource.data.artistId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'price', 'viewed'])) ||
        // Client updates (cancellation, price response)
        (isClient() &&
         resource.data.clientId == request.auth.uid &&
         (
           request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['status', 'viewed']) &&
           (
             request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(['viewed']) ||
             request.resource.data.status == 'cancelled_by_client' ||
             (resource.data.status == 'price_proposed' && 
              (request.resource.data.status == 'confirmed' || 
               request.resource.data.status == 'cancelled'))
           )
         )) ||
        // Allow participants to update hiddenBy array
        (isAppointmentParticipant(resource.data) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['hiddenBy']) &&
         (resource.data.hiddenBy == null || request.resource.data.hiddenBy.size() <= resource.data.hiddenBy.size() + 1))
      );

      allow delete: if false;
    }

    // Chats collection
    match /chats/{chatId} {
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      allow read, update, delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
  }
}